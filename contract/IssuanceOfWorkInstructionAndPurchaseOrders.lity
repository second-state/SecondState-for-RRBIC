pragma lity ^1.2.6;

contract IssuanceOfWorkInstructionAndPurchaseOrders {
    struct WorkInstruction {
        int workInstructionNum;
        int networkNumber;
        string activity;
        string originatorName;
        int date;
        string ownerOperator;
        string acRegistration;
        string engineType;
        int engineSerialNumber;
        bool onOffWing;
        string wingPosition;
        string taskLocation;
        int taskStartDateTime;
        int taskEndDateTime;
        string workscopeContactName;
        int workscopeContatNumber;
        string requestedTaskDescription;
        string technicalDataRef;
        string siaTaskRef;
        string additionalNotes;
        string costType;
        bool workInstructionAcceptance;
        string invoicingInstructions;
    }
    struct WorkPlan {
        string task;
        int acPriority;
        string type;
        int referenceNumber;
        string description;
        int funcLOCATA;
        string notificationMEL;
        string mplanCAT;
        int lastDoneOriginDate;
        int dueDate;
        string remarksRectifications;
        string sparesRequired;
        int quantity;
        int status;
        string lastUpdateByAndDate;
        string tspRemarks;
        string team;
    }
    struct PaymentMethod {
        string rrCustomerBizAuthName;
        string sapNetActivityCode;
        string rrCustomerBizAuthName;
    }
    struct Invoice {
        bool approval;
        string opServDeskRef; //Operational Service Desk Reference
        bool paymentMethodType; //True: TotalCare/CorportateCare, False: Other RR Cost
        PaymentMethod paymentMethod;
        string otherDetails;
    }
    struct Bill {
        //TODO: Bill content is still unknown.
    }

    struct Task {
        bool isComplete;
        int rebate;
    }

    struct PurchaseOrder {
        string itemName;
        string CustomerFullRegisteredCompanyAddr;
        int CustomerPurchaseOrderNum;
        int Quoterequired;
        int OnWingCareLineMaintenanceContractRefNum;
        string TotalCareCorpCareRef;
    }

    struct Job {
        //TODO: I need a task list here.
        Task* taskList;
        bool isComplete;
        PurchaseOrder purchaseOrder;
    }
    Job job;
    TaskCard *testCards;
    WorkInstruction workInstruction;

    function sendWI () public {
        //send WI to SIAEC PDD
        //send WI to Airline MPC
    }

    function issueWorkInstruction () public {
        workInstruction.ownerOperator = "XYZ Air"
        workInstruction.engineType = "XX::KXKX"
        workInstruction.engineSerialNumber = "BICX1"
        sendWI()
    }

    function issuePurchaseOrders () public {
        //TODO
    }

    rule "IssuanceOfWorkInstructionAndPurchaseOrders" when {
        //Start point of the RRBIC smart contracts
    } then {
        issueWorkInstruction()
        issuePurchaseOrders()
    }
    rule "SendQuote" when {
        //Recv PO from RR TCAvPlanner
    } then {
        //if items-to-buy is in "catalogue", then use the price in the catalogue
        //else send "Quote" to RR Purchasing to get approval
    }
}

