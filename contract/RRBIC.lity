pragma lity ^1.2.6;

contract IssuanceOfWorkInstructionAndPurchaseOrders {
	enum WIState {
		InitByRR,
		EmitToSIAEC
	}
	struct WorkInstruction {
		int workInstructionNum;
		int networkNumber;
		string activity;
		string originatorName;
		int date;
		string ownerOperator;
		string acRegistration;
		string engineType;
		int engineSerialNumber;
		bool onOffWing;
		string wingPosition;
		string taskLocation;
		int taskStartDateTime;
		int taskEndDateTime;
		string workscopeContactName;
		int workscopeContatNumber;
		string requestedTaskDescription;
		string technicalDataRef;
		string siaTaskRef;
		string additionalNotes;
		string costType;
		bool workInstructionAcceptance;
		string invoicingInstructions;
		WIState state;
	}
	struct WorkPlan {
		TaskCard[] tasks;
	}
	struct PaymentMethod {
		string rrCustomerBizAuthName;
		string sapNetActivityCode;
		string rrCustomerBizAuthName;
	}
	struct Invoice {
		bool approval;
		string opServDeskRef; //Operational Service Desk Reference
		bool paymentMethodType; //True: TotalCare/CorportateCare, False: Other RR Cost
		PaymentMethod paymentMethod;
		string otherDetails;
	}
	struct Bill {
		//TODO: Bill content is still unknown.
	}

	enum POState {
		InitByRR,
		EmitToSIAEC,
	}
	struct PurchaseOrder {
		string serviceName;
		string customerCompanyName;
		string customerFullRegisteredCompanyAddr;
		int customerPurchaseOrderNum;
		int quoterequired;
		int onWingCareLineMaintenanceContractRefNum;
		string totalCareCorpCareRef;
		POState state;
	}
	
	enum QState {
		InitBySIAEC,
		AskRRPurchasingForPrice,
		ReplyPriceTOSIAEC,
		Finilized,
	}
	struct Quote {
		string serviceName;
		int price;
		bool isApproval;
		QState state;
	}

	struct Catalogue {
		string serviceName;
		int price;
	}

	enum TaskCategory {
		SpecialInspection,
		SupplementaryJobCard,
		Others,
	}
	enum TaskCardState {
		GeneratedByPDD,
		SendToLAE,
	}
	enum TaskUpdateState {
		notYetUpdateToWorkPlan,
		UpdatedToWorkPlan,
	}
	struct TaskCard {
		string taskName;
		string acRegistration;
		int priority;
		string type;
		int referenceNumber;
		string description;
		int funcLOC_ATA;
		string notificationMEL;
		string mplan_CAT;
		int lastDoneOriginDate;
		int dueDate;
		string remarksRectifications;
		string sparesRequired;
		int quantity;
		int status;
		string lastUpdateByAndDate;
		string tspRemarks;
		string team;
		TaskCardState state;
		TaskUpdateState taskUpdateState;
	}
	struct Job {
		TaskCard[] taskList;
		bool isComplete;
		PurchaseOrder purchaseOrder;
	}
	Job job;
	TaskCard task;
	WorkInstruction WI;
	PurchaseOrder PO;
	Catalogue[] Catalogues;
	Quote Q;

//-------------------------------------------------------------
// Step 4.
	// Sender: RR
	function sendWI () public {
		//send WI to SIAEC PDD
		WI.state = EmitToSIAEC;
		//send WI to Airline MPC
		//TODO: how to loop Airline MPC.
	}

	// Sender: RR
	function issueWorkInstruction (/* You can use arguments to fill up the WI form */) public {
		WI.ownerOperator = "XYZ Air";
		WI.engineType = "XX::KXKX";
		WI.engineSerialNumber = "BICX1";
		WI.state = InitByRR;
		sendWI();
	}

	// Sender: RR
	function issuePurchaseOrders (/* You can use arguments to fill up the PO form */) public {
		PO.serviceName = "Foobar";
		PO.customerCompanyName = "XYZ Air";
		PO.state = EmitToSIAEC;
	}

	// Sender: Someone from Step3.
	function entryPoint() public {
		issueWorkInstruction();
		issuePurchaseOrders();
	}

	// Sender: SIAEC
	function sendQuote () public {
		uint i = 0;
		Q.serviceName = PO.serviceName;
		Q.isApproval = false;
		for (i = 0; i < Catalogues.length; i++) {
			if (PO.serviceName == Catalogues[i].serviceName) {
				Q.price = Catalogues[i].price;
				Q.isApproval = true;
				Q.state = Finilized;
				break;
			}
		}
		if (Q.state != Finilized) {
			// Catalogue not found
			Q.price = 0; // Will be provided by RR purchasing later.
			Q.state = AskRRPurchasingForPrice;
		}
	}

	// Sender: RR purchasing
	function replyQuote () public {
		Q.price = 1234; // RR purchasing sets the price to the service;
		Q.state = ReplyPriceToSIAEC;
	}

	// Sender: SIAEC
	function approveQuote () public {
		Q.isApproval = true;

		// Save to Catalogue
		Catalogue C;
		C.serviceName = Q.serviceName;
		C.price = Q.price;
		Catalogues.push(C);
		Q.state = Finilized;
	}
//-------------------------------------------------------------
// Step 5.
	// Trigger by Step4. when SIAEC PDD received WI.
	function generateTaskCards () public {
		task.taskName = WI.requestedTaskDescription;
		task.acRegistration = WI.acRegistration;
		task.type = SpecialInspection; // For the demo purpose, we just set the category to SpecialInspection, and you could set the value by the arguments in the future.
		task.description = WI.requestedTaskDescription;
		task.state = GeneratedByPDD;
		task.taskUpdateState = notYetUpdateToWorkPlan;
	}

	// Sender: SIAEC PDD, issue to SIAEC LAE
	function issueTaskCard () public {
		task.state = SendToLAE;
		//TODO: Add task into Job.taskList
	}

	// Sender: SIAEC, send to Aircraft OEM everyday
	function updateTaskToWorkPlan () public {
		//TODO: traverse tasks in the Job.taskList,
		//     	    if task.taskUpdateState = notYetUpdateToWorkPlan
		//               insert tasks which are not yet updated into WorkPlan
	}
//-------------------------------------------------------------
// Step 17.
}

