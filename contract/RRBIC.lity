pragma lity ^1.2.6;

contract IssuanceOfWorkInstructionAndPurchaseOrders {
//-------------------------------------------------------------
// Setup the accounts
	address public RR_TCAv_Planner_ACCOUNT = address(0x1); // Replaced by the REAL RR_TCAv_Planner_ACCOUNT address.
	address public RR_PURCHASING_ACCOUNT = address(0x2); //  Replaced by the REAL RR_PURCHASING_ACCOUNT address.
	address public SIAEC_PDD_ACCOUNT = address(0x3); // Replaced by the REAL SIAEC_PDD_ACCOUNT address.
	address public SIAEC_LAE_ACCOUNT = address(0x4); // Replaced by the REAL SIAEC_LAE_ACCOUNT address.
	address public SIAEC_PURCHASING_ACCOUNT = address(0x5); // Replaced by the REAL SIAEC_PURCHASING_ACCOUNT address.
	address public SIAEC_MPU_ACCOUNT = address(0x6); // Replaced by the REAL SIAEC_MPU_ACCOUNT address.
	address public SIAEC_VETTING_ACCOUNT = address(0x7); // Replaced by the REAL SIAEC_VETTING_ACCOUNT address.

//-------------------------------------------------------------
// Setup the access control modifier
	modifier onlyByRR_TCAv_Planner() {
		require(
			msg.sender == RR_TCAv_Planner_ACCOUNT,
			"Only RR account can trigger this function");
		_;
	}

	modifier onlyByRR_PURCHASING() {
		require(
			msg.sender == RR_PURCHASING_ACCOUNT,
			"Only RR account can trigger this function");
		_;
	}

	modifier onlyBySIAEC_PDD() {
		require(
			msg.sender == SIAEC_PDD_ACCOUNT,
			"Only SIAEC_PDD account can trigger this function");
		_;
	}

	modifier onlyBySIAEC_MPU() {
		require(
			msg.sender == SIAEC_MPU_ACCOUNT,
			"Only SIAEC_MPU account can trigger this function");
		_;
	}

	modifier onlyBySIAEC_VETTING() {
		require(
			msg.sender == SIAEC_VETTING_ACCOUNT,
			"Only SIAEC_VETTING account can trigger this function");
		_;
	}

	modifier onlyBySIAEC_LAE() {
		require(
			msg.sender == SIAEC_LAE_ACCOUNT,
			"Only SIAEC_LAE account can trigger this function");
		_;
	}

	modifier onlyBySIAEC_PURCHASING() {
		require(
			msg.sender == SIAEC_PURCHASING_ACCOUNT,
			"Only SIAEC_PURCHASING account can trigger this function");
		_;
	}

//-------------------------------------------------------------
// Type declarations.
	enum WIState {
		IssuedByRR,
		SentWIToSIAEC_PDD,
		Finalized
	}
	struct WorkInstruction {
		int workInstructionNum;
		int networkNumber;
		string activity;
		string originatorName;
		int date;
		string ownerOperator;
		string acRegistration;
		string engineType;
		string engineSerialNumber;
		bool onOffWing;
		string wingPosition;
		string taskLocation;
		int taskStartDateTime;
		int taskEndDateTime;
		string workscopeContactName;
		int workscopeContatNumber;
		string requestedTaskDescription;
		string technicalDataRef;
		string siaTaskRef;
		string additionalNotes;
		string costType;
		bool workInstructionAcceptance;
		string invoicingInstructions;
		uint256 wiId;
		WIState state;
	}
	enum PaymentType {
		TotalCare_CorporateCare,
		OtherRRCost
	}
	struct PaymentMethod {
		PaymentType paymentType;
		string rrCustomerBizAuthName;
		string sapNetActivityCode;
	}

	enum InvoiceState {
		IssuedBySIAEC,
		SentToRRPurchasing,
		Finalized
	}
	struct Invoice {
		bool approval;
		string opServDeskRef; //Operational Service Desk Reference
		bool paymentMethodType; //True: TotalCare/CorportateCare, False: Other RR Cost
		PaymentMethod paymentMethod;
		string otherDetails;
		InvoiceState state;
	}

	enum BillingState {
		IssuedBySIAEC,
		SentToRRPurchasing,
		Finalized
	}
	struct Billing {
		bool approval;
		int price;
		BillingState state;
		// The remaining part is unknown.
	}

	enum POState {
		IssuedByRR,
		SentToSIAEC,
		Finalized
	}
	struct PurchaseOrder {
		string serviceName;
		string customerCompanyName;
		string customerFullRegisteredCompanyAddr;
		int customerPurchaseOrderNum;
		bool quoteRequired;
		int onWingCareLineMaintenanceContractRefNum;
		string totalCareCorpCareRef;
		uint256 poId;
		POState state;
	}
	
	enum QState {
		CreatedBySIAEC_PURCHASING,
		AskRRPurchasingForPrice,
		ReplyPriceToSIAEC,
		Finalized
	}
	struct Quote {
		string serviceName;
		int price;
		bool isApproval;
		QState state;
	}

	struct Catalogue {
		string serviceName;
		int price;
	}

	enum TaskCategory {
		SpecialInspection,
		SupplementaryJobCard,
		Others
	}
	enum TaskCardState {
		GeneratedByPDD,
		SentToLAE,
		Finalized
	}
	enum TaskUpdateState {
		notYetUpdateToWorkPlan,
		UpdatedToWorkPlan
	}
	struct TaskCard {
		string taskName;
		string acRegistration;
		int priority;
		TaskCategory taskType;
		int referenceNumber;
		string description;
		int funcLOC_ATA;
		string notificationMEL;
		string mplan_CAT;
		int lastDoneOriginDate;
		int dueDate;
		string remarksRectifications;
		string sparesRequired;
		int quantity;
		int status;
		string lastUpdateByAndDate;
		string tspRemarks;
		string team;
		bool isCompleted;
		uint256 wiId;
		TaskCardState state;
		TaskUpdateState taskUpdateState;
	}
	struct WorkPlan {
		TaskCard[] taskList;
	}

//-------------------------------------------------------------
// Data declarations.
	// All issued WI will be stored in WIs.
	WorkInstruction[] WIs;
	// All issued PO will be stored in POs.
	PurchaseOrder[] POs;
	// Map the PO id to the quote.
	mapping (uint256 => Quote) POidToQuote;
	Catalogue[] Catalogues;
	// Map the WI id to the tasks.
	mapping (uint256 => TaskCard) WIidToTasks;
	// Map the WI id to the invoices.
	mapping (uint256 => Invoice) WIidToInvoices;
	// The universal WorkPlan which is own by Aircraft OEM.
	WorkPlan WP;
	// Map the WI id to the billings.
	mapping (uint256 => Billing) WIidToBillings;


//-------------------------------------------------------------
// Step 4.
	// Sender: Someone from Step3.
	function entryPoint() public onlyByRR_TCAv_Planner {
		issueWorkInstruction("XYZ Air", "XX::KXKX", "BICX1");
		issuePurchaseOrders("ServiceName", "XYZ Air");
	}

	function issueWorkInstruction (
		string memory ownerOperator,
		string memory engineType,
		string memory engineSerialNumber
	) public onlyByRR_TCAv_Planner {
		WorkInstruction memory WI;
		WI.ownerOperator = ownerOperator;
		WI.engineType = engineType;
		WI.engineSerialNumber = engineSerialNumber;
		WI.state = WIState.IssuedByRR;
		WIs.push(WI);
		WI.wiId = WIs.length-1;
		sendWIToSIAEC(WI.wiId);
		ccWIToAirlineMPC(WI.wiId);
	}

	function sendWIToSIAEC(uint wiId) internal onlyByRR_TCAv_Planner {
		if (WIs[wiId].state != WIState.IssuedByRR) {
			revert(); // Wrong WIID.
		}
		WIs[wiId].state = WIState.SentWIToSIAEC_PDD;
	}
	function ccWIToAirlineMPC(uint wiId) internal onlyByRR_TCAv_Planner {
		// Trigger email service to cc WI to Airline MPC.
	}

	function issuePurchaseOrders (
		string memory serviceName,
		string memory customerCompanyName
	) public onlyByRR_TCAv_Planner {
		PurchaseOrder memory PO;
		POs.push(PO);
		uint256 poId = POs.length-1;
		POs[poId].serviceName = serviceName;
		POs[poId].customerCompanyName = customerCompanyName;
		POs[poId].state = POState.IssuedByRR;
		POs[poId].poId = POs.length;
		sendPOToSIAEC_PURCHASING(poId);
	}

	function sendPOToSIAEC_PURCHASING(
		uint256 poId
	) internal onlyByRR_TCAv_Planner {
		if (POs[poId].state != POState.IssuedByRR) {
			revert(); // Wrong PO state.
		}
		POs[poId].state = POState.SentToSIAEC;
	}

	function fillUpPO(
		uint poId
	) public onlyBySIAEC_PURCHASING {
		if (POs[poId].state != POState.SentToSIAEC) {
			revert(); // Wrong PO state.
		}
		POs[poId].quoteRequired = true; // Assume the serviceName is not in the Catalogues.
		// Check if the service name is in the Catalogues or not
		for (uint iterCt = 0; iterCt < Catalogues.length; iterCt++) {
			if (keccak256(abi.encodePacked(POs[poId].serviceName)) == keccak256(abi.encodePacked(Catalogues[iterCt].serviceName))) {
				// The serviceName is in the Catalogues.
				POs[poId].quoteRequired = false;
			}
		}

		if (POs[poId].quoteRequired) {
			// If the serviceName is not in the Catalogues, PO should ask RR purchasing for the price.
			createQuoteWithPOid(poId);
			sendQuoteToRR(poId);
		} else {
			POs[poId].state = POState.Finalized;
			// Because the serviceName is in the Catalogues, 
		}
	}

	function createQuoteWithPOid(
		uint256 poId
	) internal onlyBySIAEC_PURCHASING {
		Quote memory Q;
		Q.serviceName = POs[poId].serviceName;
		Q.price = 0; // Will be updated by RR_PURCHASING later.
		Q.isApproval = false;
		Q.state = QState.CreatedBySIAEC_PURCHASING;
		POidToQuote[poId] = Q;
	}

	function sendQuoteToRR(
		uint256 poId
	) internal onlyBySIAEC_PURCHASING {
		if (POidToQuote[poId].state != QState.CreatedBySIAEC_PURCHASING) {
			revert(); // Wrong Quote state.
		}
		POidToQuote[poId].state = QState.AskRRPurchasingForPrice;
	}

	function replyQuotePrice(
		uint256 poId,
		int price
	) public onlyByRR_PURCHASING {
		if (POidToQuote[poId].state != QState.AskRRPurchasingForPrice) {
			revert(); // Wrong Quote state.
		}
		POidToQuote[poId].state = QState.ReplyPriceToSIAEC;
		POidToQuote[poId].price = price;
	}

	function approveQuote (
		uint256 poId
	) public onlyBySIAEC_PURCHASING {
		if (POidToQuote[poId].state != QState.ReplyPriceToSIAEC) {
			revert(); // Wrong Quote state.
		}

		POidToQuote[poId].isApproval = true;

		// Save to Catalogue
		Catalogue memory C;
		C.serviceName = POidToQuote[poId].serviceName;
		C.price = POidToQuote[poId].price;
		Catalogues.push(C);
		POidToQuote[poId].state = QState.Finalized;
		POs[poId].state = POState.Finalized;
	}


//-------------------------------------------------------------
// Step 5.
	// Trigger by Step4. when SIAEC PDD received WI.
	function generateTaskCards (
		uint256 wiId
	) public onlyBySIAEC_PDD {
		TaskCard memory task;
		task.taskName = WIs[wiId].requestedTaskDescription;
		task.acRegistration = WIs[wiId].acRegistration;
		task.taskType = TaskCategory.SpecialInspection; // For the demo purpose, we just set the category to SpecialInspection, and you could set the value by the arguments in the future.
		task.description = WIs[wiId].requestedTaskDescription;
		task.isCompleted = false;
		task.wiId = wiId;

		task.state = TaskCardState.GeneratedByPDD;
		task.taskUpdateState = TaskUpdateState.notYetUpdateToWorkPlan;

		WIidToTasks[wiId] = task;
	}

	// Sender: SIAEC PDD, issue to SIAEC LAE
	function issueTaskCardToWorkPlan (
		uint256 wiId
	) public onlyBySIAEC_PDD {
		if (WIidToTasks[wiId].state != TaskCardState.GeneratedByPDD) {
			revert(); // Wrong Task State.
		}
		WIidToTasks[wiId].state = TaskCardState.SentToLAE;
		WIidToTasks[wiId].taskUpdateState = TaskUpdateState.UpdatedToWorkPlan;
		WP.taskList.push(WIidToTasks[wiId]);
	}

	function assumeStep7UpdateTask (
		uint256 wiId
	) public onlyBySIAEC_MPU {
		if (WIidToTasks[wiId].state != TaskCardState.SentToLAE) {
			revert(); // Wrong Task State.
		}
		// Because we don't handle the step 7 in our proposal.
		// We just assume that MPU will update tasks directly.
		WIidToTasks[wiId].state = TaskCardState.Finalized;
		WIidToTasks[wiId].isCompleted = true;
	}

//-------------------------------------------------------------
// Step 17.
	// Sender: Step 17 entry point, assume all of the tasks in the job are done.
	function prepareToCloseWI(
		uint256 wiId
	) public onlyBySIAEC_VETTING {
		sendDocsToERP();
		createBilling(wiId);
		sendBillingToRR(wiId);
	}

	// Sender: SIAEC Vetting sends two files to the ERP system
	function sendDocsToERP () internal onlyBySIAEC_VETTING {
		// Update Tech records in ERP
		// Archive TaskCard from this contract and send it to the ERP system.
	}

	function createBilling (
		uint256 wiId
	) internal onlyBySIAEC_VETTING {
		uint256 poId = wiId;
		Billing memory B;
		B.approval = false;
		// Load the service price from Catalogues.
		for (uint256 iterCt = 0; iterCt < Catalogues.length; iterCt++) {
			if (keccak256(abi.encodePacked(POs[poId].serviceName)) == keccak256(abi.encodePacked(Catalogues[iterCt].serviceName))) {
				B.price = Catalogues[iterCt].price;
			}
		}
		B.state = BillingState.IssuedBySIAEC;
		WIidToBillings[wiId] = B;
	}

	// Sender: SIAEC sends billing request to RR
	function sendBillingToRR (
		uint256 wiId
	) internal onlyBySIAEC_VETTING {
		if (WIidToBillings[wiId].state != BillingState.IssuedBySIAEC) {
			revert(); // Wrong Billing State.
		}
		WIidToBillings[wiId].state = BillingState.SentToRRPurchasing;
	}

	// Sender: RR approves the billing request to SIAEC
	function approveBilling (
		uint256 wiId
	) public onlyByRR_PURCHASING {
		if (WIidToBillings[wiId].state != BillingState.SentToRRPurchasing) {
			revert(); // Wrong Billing State.
		}
		WIidToBillings[wiId].state = BillingState.Finalized;
		WIidToBillings[wiId].approval = true;
	}

	function createInvoice (
		uint256 wiId
	) public onlyBySIAEC_VETTING {
		uint256 poId = wiId;
		Invoice memory I;
		I.approval = false;
		I.opServDeskRef = POs[poId].serviceName;
		I.state = InvoiceState.IssuedBySIAEC;
		WIidToInvoices[wiId] = I;
	}

	// Sender: SIAEC sends invoice to RR and request RR's approval
	function sendInvoice (
		uint256 wiId
	) public onlyBySIAEC_VETTING {
		if (WIidToInvoices[wiId].state != InvoiceState.IssuedBySIAEC) {
			revert(); // Wrong Invoice State
		}
		WIidToInvoices[wiId].state = InvoiceState.SentToRRPurchasing;
	}

	// Sender: RR approves the invoice
	function approveInvoice (
		uint256 wiId
	) public onlyByRR_PURCHASING {
		if (WIidToInvoices[wiId].state != InvoiceState.SentToRRPurchasing) {
			revert(); // Wrong Invoice State
		}
		WIidToInvoices[wiId].approval = true;
		WIidToInvoices[wiId].state = InvoiceState.Finalized;
	}

	// Sender: SIAEC pays the money
	function pay (
		uint256 wiId
	) public onlyBySIAEC_VETTING {
		if (WIidToInvoices[wiId].state != InvoiceState.Finalized) {
			revert(); // Wrong Invoice State
		}
		// Pay the money
	}
}


